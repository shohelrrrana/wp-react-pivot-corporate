"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _jsxFileName = "/Users/cedricdelpoux/Development/perso/react-responsive-masonry/src/ResponsiveMasonry/index.js";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var DEFAULT_COLUMNS_COUNT = 1;

var MasonryResponsive = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(MasonryResponsive, _React$Component);

  function MasonryResponsive(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      columnsCount: DEFAULT_COLUMNS_COUNT
    };
    _this.handleResize = _this.handleResize.bind(_assertThisInitialized(_this));
    _this.handleRef = _this.handleRef.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = MasonryResponsive.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateColumnsCount();
    window.addEventListener("resize", this.handleResize); // eslint-disable-line
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener("resize", this.handleResize); // eslint-disable-line
  };

  _proto.getSortedBreakPoints = function getSortedBreakPoints() {
    var breakPoints = Object.keys(this.props.columnsCountBreakPoints);
    return breakPoints.sort(function (a, b) {
      return a - b;
    });
  };

  _proto.updateColumnsCount = function updateColumnsCount() {
    var columnsCountBreakPoints = this.props.columnsCountBreakPoints;
    var containerWidth = this.container.offsetWidth;
    var breakPoints = this.getSortedBreakPoints();
    var columnsCount = breakPoints.length > 0 ? columnsCountBreakPoints[breakPoints[0]] : DEFAULT_COLUMNS_COUNT;
    breakPoints.forEach(function (breakPoint) {
      if (breakPoint < containerWidth) {
        columnsCount = columnsCountBreakPoints[breakPoint];
      }
    });

    if (columnsCount && columnsCount !== this.state.columnsCount) {
      this.setState({
        columnsCount: columnsCount
      });
    }
  };

  _proto.handleResize = function handleResize() {
    this.updateColumnsCount();
  };

  _proto.handleRef = function handleRef(ref) {
    if (!this.container) this.container = ref;
  };

  _proto.render = function render() {
    var columnsCount = this.state.columnsCount;
    var _this$props = this.props,
        children = _this$props.children,
        className = _this$props.className,
        style = _this$props.style;
    return /*#__PURE__*/_react["default"].createElement("div", {
      ref: this.handleRef,
      className: className,
      style: style,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 7
      }
    }, _react["default"].Children.map(children, function (child, index) {
      return _react["default"].cloneElement(child, {
        key: index,
        columnsCount: columnsCount
      });
    }));
  };

  return MasonryResponsive;
}(_react["default"].Component);

MasonryResponsive.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].node]).isRequired,
  columnsCountBreakPoints: _propTypes["default"].object,
  className: _propTypes["default"].string,
  style: _propTypes["default"].object
} : {};
MasonryResponsive.defaultProps = {
  columnsCountBreakPoints: {
    350: 1,
    750: 2,
    900: 3
  },
  className: null,
  style: null
};
var _default = MasonryResponsive;
exports["default"] = _default;